# -*- coding: utf-8 -*-
"""Live 01 - Obtenção e análise de dados de BTC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Trading-com-Dados/Jornada-Quant-04/blob/main/Live_01_Obten%C3%A7%C3%A3o_e_an%C3%A1lise_de_dados_de_BTC.ipynb

---
# **Jornada Quant - 4ª Edição** 
---

### Código desenvolvido no primeiro dia da Jornada Quant (08/02/2022)<br>

[Dia 01](https://www.youtube.com/watch?v=XgbySUkNs64&t=5s) | [Dia 02](https://www.youtube.com/watch?v=lQMa-_Ng0qc&t=30s) | [Dia 03](https://www.youtube.com/watch?v=oJ1Oo8swgCU&t=88s) | [Dia 04](https://www.youtube.com/watch?v=ZkAP3MV1aFM)<p>

### *Disclaimer:*
Este código foi elaborado para fins exclusivamente educacionais. O conteúdo aqui apresentado visa fornecer informações complementares para auxiliar o investidor na tomada de suas próprias decisões de investimento. Reforçando, nenhum tópico aqui abordado constitui qualquer tipo de indicação/oferta/solicitação de compra/venda de qualquer produto.<br/>
<br/>
<img src="https://tradingcomdados.com/images/logotipo/logotipo-trading-com-dados.svg" width="300">

---

# 1. Instalação e importação de bibliotecas
"""

!pip install python-binance
!pip install plotly

import pandas as pd
from binance.client import Client
import plotly.graph_objects as go
from plotly.subplots import make_subplots

client = Client()

btcbrl = client.get_historical_klines(symbol = "BTCBRL", start_str = "2021-01-01", end_str = "2022-02-08", interval = Client.KLINE_INTERVAL_1DAY)

type(btcbrl)

btc_brl = pd.DataFrame(btcbrl)

btc_brl.head()

# Renomear as colunas
btc_brl.rename(columns={0:'date',1:'open',2:'high',3:'low',4:'close'},inplace=True)

# Configurar o indice do dataframe como sendo a data
btc_brl.set_index('date', inplace=True)

# Mudar o formato da data para padrão
btc_brl.index = pd.to_datetime(btc_brl.index,unit='ms')

# Dropar todas as colunas da 4 pra frente
btc_brl = btc_brl.drop(btc_brl.columns[4:],axis=1)

btc_brl.head()

btc_brl.dtypes

btc_brl['open'] = pd.to_numeric(btc_brl['open'])
btc_brl['high'] = pd.to_numeric(btc_brl['high'])
btc_brl['low'] = pd.to_numeric(btc_brl['low'])
btc_brl['close'] = pd.to_numeric(btc_brl['close'])

"""# 2. Análise Quantitativa"""

btc_brl['close'].plot(figsize = (5,5));

btc_brl.close.plot(figsize = (5,5));

btc_brl['retornos'] = btc_brl['close'].pct_change()

btc_brl.head()

btc_brl['retornos'].describe()

# Distribuição dos retornos do BTC

btc_brl['retornos'].plot.hist(bins = 100);

# Janela de volatilidade

vol_30 = btc_brl['retornos'].rolling(window = 30).std()

vol_30.plot()

# Drawdown em janela de 30 dias
# Perda máxima em um determinado período - distância entre ganho máximo e a mínima

dd_30 = btc_brl['retornos'].rolling(window = 30).min()

dd_30.plot();

"""# 3. Criação dos sinais do trading e backtesting

## 3.1. Definição
"""

import IPython
url = 'https://i1.wp.com/escolatrader.net/wp-content/uploads/2013/08/petr4pond.jpg'
IPython.display.Image(url, width = 500)

# Lembrete: procure parametrizar tudo o que você faz

## Variação mínima do preço || Ações = R$0.01 || WINFUT = 5pts || INDFUT= 1pt

tick_min = 1 # variação minínima para ações no preço
MM_periodo = 9

"""## 3.2. Construção do sinal de COMPRA

Regra 1: Preço Fech > MM
"""

## Cálculo Média Móvel de 9 períodos
MMA = btc_brl['close'].rolling(window=MM_periodo).mean()

MMA.plot();

btc_brl['MMA'] = MMA
btc_brl.head(20)

#GRÁFICO MÉDIA MOVEL
#cria figura
fig = make_subplots(rows=1, cols=1)
#Adiciona o gráfico de candlestick com os parametros OHLC no eixo y e no eixo x o index com as datas
fig.add_trace(go.Candlestick(name='Bitcoin_BRL', x=btc_brl.index, open=btc_brl['open'], high = btc_brl['high'], low=btc_brl['low'], close=btc_brl['close'],showlegend=True), row=1,col=1)
# cria o gráfico de MMA com o mesmo racional de eixo de cima
fig.add_trace(go.Scatter(name='MMA_9p', x=btc_brl.index, y=btc_brl.MMA, marker_color='blue'),row=1,col=1)
#Personalizar o eixo Y
fig.update_yaxes(title_text="<b> Preço Bitcoin (R$)", row=1, col=1)
#Personalizar aspectos da figura em geral
fig.update_layout(xaxis_rangeslider_visible=False,width=1000 ,height=500)
#Mostra a figura
fig.show()

"""Regra 2: Preço candle anterior < MMA9p"""

